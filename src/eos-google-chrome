#!/usr/bin/python3
#
# eos-google-chrome: helper script to install/launch Google Chrome
#
# Copyright (C) 2016 Endless Mobile, Inc.
# Authors:
#  Mario Sanchez Prada <mario@endlessm.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import logging
import os
import subprocess
import sys

import gi
gi.require_version('Flatpak', '1.0')
from gi.repository import Flatpak
from gi.repository import GLib


def exit_with_error(message):
    logging.error(message)
    sys.exit(1)


class GoogleChromeLauncher:

    FLATPAK_CHROME_APP_ID = 'com.google.Chrome'
    FLATPAK_REMOTE_EOS_APPS = 'eos-apps'

    def __init__(self, params):
        self._params = params
        try:
            self._installation = Flatpak.Installation.new_system()
        except GLib.Error as e:
            exit_with_error("Could not find current system installation: {}".format(repr(e)))

        self._start()

    def _start(self):
        chrome_launcher = self._get_chrome_flatpak_launcher()
        if chrome_launcher:
            logging.info("Flatpak launcher for Chrome found. Launching...")
            self._run_chrome_app(chrome_launcher, self._params)
        else:
            logging.info("Could not find flatpak launcher for Chrome. Opening App Center...")
            self._run_app_center_for_chrome()

    def _run_chrome_app(self, chrome_launcher, params):
            try:
                launcher_process = subprocess.Popen([chrome_launcher] + params)
                logging.info("Running Google Chrome launcher with PID %d", launcher_process.pid)
            except OSError as e:
                exit_with_error("Could not launch Google Chrome: {}".format(repr(e)))

            launcher_process.wait()
            logging.info("Google Chrome launcher stopped")

    def _run_app_center_for_chrome(self):
        # We use the APP ID as the one for GNOME Software, to let it choose the best one.
        chrome_app_center_id = self.FLATPAK_CHROME_APP_ID

        # FIXME: Ideally, we should be able to pass 'com.google.Chrome' to GNOME Software
        # and it would do the right thing by opening the page for the app's branch matching
        # the default branch for the apps' source remote. Unfortunately, this is not the case
        # at the moment and fixing it is non-trivial, so we'll construct the full unique ID
        # that GNOME Software expects, right from here, based on the remote's metadata.
        default_branch = None
        try:
            remote = self._installation.get_remote_by_name(self.FLATPAK_REMOTE_EOS_APPS)
        except GLib.Error as e:
            logging.warning("Could not determine default branch for remote %s", self.FLATPAK_REMOTE_EOS_APPS)

        default_branch = remote.get_default_branch()
        if default_branch:
            chrome_app_center_id = 'system/flatpak/{}/desktop/{}.desktop/{}'.format(self.FLATPAK_REMOTE_EOS_APPS,
                                                                                    self.FLATPAK_CHROME_APP_ID,
                                                                                    default_branch)
        try:
            subprocess.Popen(['gnome-software', '--details={}'.format(chrome_app_center_id)])
        except OSError as e:
            exit_with_error("Could not launch Chrome: {}".format(repr(e)))

    def _get_chrome_flatpak_launcher(self):
        app = None
        try:
            app = self._installation.get_current_installed_app(self.FLATPAK_CHROME_APP_ID, None)
        except GLib.Error:
            logging.info("Chrome application is not installed")
            return None

        app_path = app.get_deploy_dir()
        if not app_path or not os.path.exists(app_path):
            exit_with_error("Could not find Chrome's application directory")

        app_launcher_path = os.path.join(app_path, 'files', 'bin', 'eos-google-chrome-app')
        if not os.path.exists(app_launcher_path):
            exit_with_error("Could not find flatpak launcher for Google Chrome")

        logging.info("Found flatpak launcher for Google Chrome: %s", repr(app_launcher_path))
        return app_launcher_path


if __name__ == '__main__':
    # Google Chrome is only available for Intel 64-bit
    app_arch = Flatpak.get_default_arch()
    if app_arch != 'x86_64':
        exit_with_error("Found installation of unsupported architecture: {}".format(app_arch))

    cmdline_args = sys.argv[1:]
    if len(sys.argv) > 1 and sys.argv[1] == '--debug':
        logging.basicConfig(level=logging.INFO)

    GoogleChromeLauncher(cmdline_args)
    sys.exit(0)
